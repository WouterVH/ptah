from pyramid.httpexceptions import HTTPFound
from pyramid.security import authenticated_userid

from ptah import view, form, cms, resolve

from {{package}}.app import ApplicationRoot
from {{package}}.models import Link

# register static asset directory

view.static('{{package}}', '{{package}}:static')

class Telephone(form.Regex):
    """ An example validator.  See ptah.form.validators for more info."""
    def __init__(self, msg=None):
        if msg is None:
            msg = "Invalid telephone number"           
        super(Telephone, self).__init__(
            u'^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$', msg=msg)


# This is a "class view", you do not need to use a class for your 
# view. You can use a Function view as provided below.

class HomepageView(view.View):
    """ Homepage view """
    
    view.pview(context=ApplicationRoot,
               template=view.template('templates/homepage.pt'))

    def get_links(self):
        return cms.Session.query(Link)

    def update(self):
        """ update is called before template applied for ptah.view.View """
        self.principal = authenticated_userid(self.request)
        self.user = resolve(self.principal)

# This is a "function view", you do not need to use a function for your 
# view.  You can use a Class view as provided above.

@view.pview('contact-us.html', context=ApplicationRoot,
            template=view.template('templates/template.pt'))

def contact_us(context, request):

    contactform = form.Form(context, request)
 
    contactform.fields = form.Fieldset(

        form.TextField(
            'fullname',
            title = u'First & Last Name'),  

        form.TextField(
            'phone',
            title = u'Telephone number',
            description=u'Please provide telephone number',
            validator = Telephone()),

        form.TextField(
            'email',
            title = u'Your email',
            description = u'Please provide email address.',
            validator = form.Email()),

        form.TextAreaField(
            'subject',
            title = u'How can we help?',
            missing = u''), # field use this value is request doesnt contain
                            # field value, effectively field is required
                            # if `missing` is not specified
        )

    # form actions
    def cancelAction(form):
        raise HTTPFound(location='.')

    def updateAction(form):
        data, errors = form.extract()

        if errors:
            form.message(errors, 'form-error')
            return

        # form.context is ...
        form.context.fullname = data['fullname']
        form.context.phone = data['phone']
        form.context.email = data['email']
        form.context.subject = data['subject']

        # Form succeeded; want to send email?  put data in database?
        # you would add that logic here.

        form.message('Content has been updated.', 'info')
        raise HTTPFound(location='.')

    contactform.buttons.add_action('Update', action=updateAction)
    contactform.buttons.add_action('Cancel', action=cancelAction)

    # form default values
    contactform.content = {'title': context.title,
                           'description': context.description}

    # prepare form
    contactform.update()

    # render form into HTML
    rendered_form = contactform.render()

    # render messages
    rendered_messages = view.render_messages(request)

    # Left hand box requires links; this is downside of using
    # of using functions for views.. but here we go
    links = cms.Session.query(Link)
    
    #include library dependencies
    view.include('bootstrap', request)
    
    rendered_includes = view.render_includes(request)
    
    principal = authenticated_userid(request)
    user = resolve(principal)
        
    return {'links':links,
             'rendered_form':rendered_form,
             'rendered_messages':rendered_messages,
             'rendered_includes':rendered_includes,
             'static_url':view.static_url('{{package}}', '', request),
             'user':user,
             'request':request}          